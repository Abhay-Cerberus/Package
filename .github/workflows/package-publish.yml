name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_info.outputs.package_name }}
      new_version: ${{ steps.package_info.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get Package Name and Version
        id: package_info
        run: |
          PACKAGE_NAME=$(grep -Po '(?<=^name = ")[^"]+' pyproject.toml)
          NEW_VERSION=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest

    steps:
      - name: Fetch PyPI Info
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_version" ]; then
            latest_version="0.0.0"
          fi
          echo "latest_previous_version=$latest_version" >> $GITHUB_ENV

      - name: Compare Versions
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "Version is valid for publishing."
          fi

  test:
    needs: details
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache NLTK Data
        uses: actions/cache@v3
        with:
          path: ~/.cache/nltk
          key: nltk-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install Dependencies
        run: poetry install

      - name: Download NLTK Data
        run: |
          python -m nltk.downloader --user punkt
          python -m nltk.downloader --user wordnet
          python -m nltk.downloader --user averaged_perceptron_tagger
          python -m nltk.downloader --user omw-1.4

      - name: Run Tests
        run: poetry run pytest --disable-warnings

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install & Build
        run: |
          poetry install
          poetry build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to PyPI
    needs: [build, details]
    runs-on: ubuntu-latest
    environment:
      name: publish
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
